/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.dowster.school.datacomm.program1.gui;

import net.dowster.school.datacomm.program1.ChatConnection;
import net.dowster.school.datacomm.program1.ChatMessage;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author dowbr
 */
public class ChatWindow extends javax.swing.JFrame {

    private ChatConnection chatConnection;
    private Timer messageCheckerTimer = new Timer();
    
    /**
     * Creates new form ChatWindow
     */
    public ChatWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        serverAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        serverPort = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        messageText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        connectionErrorMessage = new javax.swing.JLabel();
        connectionErrorMessage.setVisible(false);
        jScrollPane2 = new javax.swing.JScrollPane();
        chatLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Server Address");

        serverAddress.setText("io.uwplatt.edu");
        serverAddress.setToolTipText("");

        jLabel2.setText("Server Port");

        serverPort.setText("5764");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Message:");

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        connectionErrorMessage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        connectionErrorMessage.setForeground(new java.awt.Color(255, 0, 0));
        connectionErrorMessage.setText("Error connecting, try again.");

        chatLog.setEditable(false);
        chatLog.setColumns(20);
        chatLog.setRows(5);
        jScrollPane2.setViewportView(chatLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(serverAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                    .addComponent(serverPort)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(connectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectionErrorMessage))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3)))
                        .addGap(0, 239, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sendButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(messageText)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(serverAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(connectionErrorMessage))
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        
        if(this.chatConnection != null && this.chatConnection.isConnected()) 
            disconnect();
        else
            connect();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if(this.chatConnection != null && this.chatConnection.isConnected()) 
        {
            ChatMessage temp = new ChatMessage("Client", messageText.getText());
            this.chatConnection.sendMessage(temp);
            this.chatLog.append(temp.toString());
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatLog;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel connectionErrorMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField messageText;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField serverAddress;
    private javax.swing.JTextField serverPort;
    // End of variables declaration//GEN-END:variables


    private void updateConnectionStatus() 
    {
        if(this.chatConnection != null && this.chatConnection.isConnected()) 
        {
            this.connectButton.setText("Disconnect");
            this.sendButton.setEnabled(true);
        } 
        else
        {
            this.connectButton.setText("Connect");
            this.sendButton.setEnabled(false);
        }
    }

    private void disconnect() {
        try
        {
            this.chatConnection.disconnect();
        } catch(IOException e) {
            this.chatConnection = null;
        }
        
        chatLog.append("Disconnected\r\n");
        messageCheckerTimer.cancel();
        messageCheckerTimer.purge();
        messageCheckerTimer = new Timer();
        updateConnectionStatus();
    }

    private void connect()
    {
        try 
        {
            this.chatConnection =
                  new ChatConnection(
                        this.serverAddress.getText(),
                        Integer.decode(this.serverPort.getText()));
            connectionErrorMessage.setVisible(false);
            chatLog.append(
                  "Connected to server" + System.getProperty("line.separator"));
            updateConnectionStatus();
            startMessageChecker();
        } 
        catch (IOException ex) 
        {
            connectionErrorMessage.setVisible(true);
        }
    }
    
    private void startMessageChecker() {
        messageCheckerTimer.schedule(new MessageChecker(), 100, 100);
    }
    
    private class MessageChecker extends TimerTask 
    {
        @Override
        public void run() {
            if(chatConnection != null) 
            {
                ChatMessage temp;
                if((temp = chatConnection.getMessage()) != null) 
                {
                    chatLog.append(temp.toString());

                    if(temp.getMessage().equals("Good Bye!"))
                        disconnect();
                }
            } 
        }
    }
}
